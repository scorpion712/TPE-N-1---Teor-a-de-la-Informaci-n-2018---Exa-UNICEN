/*
 * Teoria de la Informacion - 2018
 */
package frames;

import static java.awt.Frame.MAXIMIZED_BOTH;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;
import javax.swing.JButton;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import teoriadelainformaciontpe.BmpHelper;
import teoriadelainformaciontpe.BmpImage;

/**
 *
 * @author Diez, Lautaro
 */
public class Ejercicio2 extends javax.swing.JDialog {

    private List<BmpImage> images;
    private BmpImage original;

    /**
     * Creates new form Ejercicio3
     */
    public Ejercicio2(java.awt.Frame parent, boolean modal, List<BmpImage> images, BmpImage original) {
        super(parent, modal);
        initComponents();
        this.setTitle("Obtención de Histogramas");
        this.images = images;
        this.original = original;
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText(BOTON1);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getHistogram(evt);
            }
        });

        jButton2.setText(BOTON2);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getHistogram(evt);
            }
        });

        jButton3.setText(BOTON3);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getHistogram(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)
                        .addGap(30, 30, 30)
                        .addComponent(jButton2)
                        .addGap(38, 38, 38)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getHistogram(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getHistogram
        String elegido = ((JButton) evt.getSource()).getText();
        Hashtable<Integer, Integer> readImageTable = new Hashtable<>();
        Vector<Integer> vectorSimbolos = new Vector<>();
        Vector<Double> vectorProb = new Vector<>();
        try {
            switch (elegido) {
                case BOTON1:// Imagen original
                    BmpHelper.getDistribution(original);
                    readImageTable = BmpHelper.readImage(original.getBmp()); // obtengo los símbolos (píxeles) que aparecen y la cantidad de veces 
                    vectorSimbolos = new Vector<Integer>(readImageTable.keySet()); // Creo un vector con los símbolos que aparecen en la imagen
                    Collections.sort(vectorSimbolos); // Ordeno el vector que será el eje X del histograma

                    // Ahora debo obtener la probabilidad de cada símbolo: simbolo[i] / cant_símbolos = pixel_i / (ancho*alto)
                    vectorProb = BmpHelper.getProb(vectorSimbolos, readImageTable, original.getBmp()); // eje Y

                    // Utilizando la librería JFreeChart creamos el histograma
                    showHistogram(vectorSimbolos, vectorProb, original);

                    // Promedio: <S(t)> = Sumatoria desde i de (Si.P(Si)) 
                    jTextArea1.setText("Media de imagen original: " + BmpHelper.getBmpMedia(original));

                    // Desvío: sigma(t) = Raíz cuadrada de (Sumatoria desde i de ( (Si - <S(t)>)^2.P(Si) ) ) 
                    jTextArea1.setText(jTextArea1.getText() + "\nDesvío de imagen original: " + BmpHelper.getStandardDeviation(original));
                    break;
                case BOTON2:        // Imagen más parecida
                    readImageTable = BmpHelper.readImage(images.get(0).getBmp());
                    vectorSimbolos = new Vector<Integer>(readImageTable.keySet());
                    Collections.sort(vectorSimbolos);
                    vectorProb = BmpHelper.getProb(vectorSimbolos, readImageTable, images.get(0).getBmp());
                    showHistogram(vectorSimbolos, vectorProb, images.get(0));
                    jTextArea1.setText("Media de imagen más parecida(" + images.get(0).getName() + "): " + BmpHelper.getBmpMedia(images.get(0)));
                    jTextArea1.setText(jTextArea1.getText() + "\nDesvío de imagen más parecida(" + images.get(0).getName() + "): " + BmpHelper.getStandardDeviation(images.get(0)));
                    break;
                case BOTON3:// Imagen menos parecida
                    readImageTable = BmpHelper.readImage(images.get(images.size() - 1).getBmp());
                    vectorSimbolos = new Vector<Integer>(readImageTable.keySet());
                    Collections.sort(vectorSimbolos);
                    vectorProb = BmpHelper.getProb(vectorSimbolos, readImageTable, images.get(images.size() - 1).getBmp());
                    showHistogram(vectorSimbolos, vectorProb, images.get(images.size() - 1));
                    jTextArea1.setText("Media de imagen menos parecida(" + images.get(images.size() - 1).getName() + "): " + BmpHelper.getBmpMedia(images.get(images.size() - 1)));
                    jTextArea1.setText(jTextArea1.getText() + "\nDesvío de imagen menos parecida(" + images.get(images.size() - 1).getName() + "): " + BmpHelper.getStandardDeviation(images.get(images.size() - 1)));
                    break;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_getHistogram

    // Create and show a Histogram with JFreeChart Library
    private static void showHistogram(Vector<Integer> simbols, Vector<Double> simbolsProb, BmpImage image) {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < simbols.size(); i++) {
            dataset.setValue(simbolsProb.get(i), "Intensidad de gris [0-255]", simbols.get(i));
        }

        JFreeChart chart = ChartFactory.createBarChart(image.getName(), "Símbolos", "Probabilidad de ocurrencia", dataset, PlotOrientation.VERTICAL, true, true, true);
        ChartFrame frame = new ChartFrame("Histograma de la imagen", chart);
        frame.setExtendedState(MAXIMIZED_BOTH);
        frame.pack(); // preferred sizes
        frame.setVisible(true);
    }

    private static final String BOTON1 = "Original";
    private static final String BOTON2 = "Más parecida";
    private static final String BOTON3 = "Menos parecida";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
